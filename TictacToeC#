using System;

namespace TicTacToe
{
    class Program
    {
        static char[] board = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
        static char currentPlayer = 'X';

        static void Main(string[] args)
        {
            // Test Case 1: Valid Move
            board[4] = 'X'; // Simulate a valid move by Player X at position 5
            DrawBoard();

            // Test Case 2: Invalid Move
            int move = 0; // Simulate Player X choosing position 1
            if (IsValidMove(move))
            {
                board[move] = currentPlayer;
                DrawBoard();
            }
            else
            {
                Console.WriteLine("Invalid move. Try again.");
            }

            // Test Case 3: Winning Combination
            ResetBoard(); // Reset the board
            board[0] = 'X'; // Simulate a winning combination for Player X
            board[1] = 'X';
            board[2] = 'X';
            DrawBoard();
            Console.WriteLine($"Player {currentPlayer} wins!");

            // Test Case 4: Draw
            ResetBoard(); // Reset the board
            board[0] = 'X'; // Simulate a game ending in a draw
            board[1] = 'O';
            board[2] = 'X';
            board[3] = 'O';
            board[4] = 'X';
            board[5] = 'X';
            board[6] = 'O';
            board[7] = 'X';
            board[8] = 'O';
            DrawBoard();
            Console.WriteLine("It's a draw!");

            // Continue with the rest of the game logic for manual testing
            // ...

        }

        static void DrawBoard()
        {
            Console.Clear();
            Console.WriteLine(" " + board[0] + " | " + board[1] + " | " + board[2]);
            Console.WriteLine("---+---+---");
            Console.WriteLine(" " + board[3] + " | " + board[4] + " | " + board[5]);
            Console.WriteLine("---+---+---");
            Console.WriteLine(" " + board[6] + " | " + board[7] + " | " + board[8]);
        }

        static bool IsValidMove(int move)
        {
            return move >= 0 && move <= 8 && board[move] == ' ';
        }

        // Add the CheckForWin and other game-related methods here

        // Helper method to reset the board
        static void ResetBoard()
        {
            for (int i = 0; i < board.Length; i++)
            {
                board[i] = ' ';
            }
        }
    }
}
